#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

// Wi-Fi
const char* ssid = "UEA_PROENSP";
const char* password = "proenspwifi";

// Servidor para envio do POST
const char* serverUrl = "http://192.168.17.103:3000/wifi-scan";

// LED
const int ledPin = 2; // GPIO2 = D4 no NodeMCU
String ledState = "off";

// Web Server
WiFiServer server(80);
String header;

// Timeout da conexão HTTP
unsigned long currentTime = millis();
unsigned long previousTime = 0;
const long timeoutTime = 2000;

void enviaPostLedStatus(const String& estado) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;
    http.begin(client, serverUrl);
    http.addHeader("Content-Type", "application/json");

    DynamicJsonDocument doc(1024);
    JsonArray redes = doc.createNestedArray("redes");
    JsonObject rede = redes.createNestedObject();
    rede["status"] = estado;  // "on" ou "off"

    String payload;
    serializeJson(doc, payload);

    int resposta = http.POST(payload);
    if (resposta > 0) {
      Serial.printf("POST enviado. Código HTTP: %d\n", resposta);
      String respostaServidor = http.getString();
      Serial.println("Resposta do servidor: " + respostaServidor);
    } else {
      Serial.printf("Erro ao enviar POST: %s\n", http.errorToString(resposta).c_str());
    }
    http.end();
  } else {
    Serial.println("Wi-Fi desconectado, não foi possível enviar os dados.");
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // Conectar ao Wi-Fi
  Serial.print("Conectando a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi conectado!");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());

  server.begin();
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("Novo cliente.");
    String currentLine = "";

    while (client.connected() && currentTime - previousTime <= timeoutTime) {
      currentTime = millis();

      if (client.available()) {
        char c = client.read();
        header += c;
        Serial.write(c);

        if (c == '\n') {
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            if (header.indexOf("GET /led/on") >= 0) {
              Serial.println("LED ligado");
              ledState = "on";
              digitalWrite(ledPin, HIGH);
              enviaPostLedStatus(ledState);
            } else if (header.indexOf("GET /led/off") >= 0) {
              Serial.println("LED desligado");
              ledState = "off";
              digitalWrite(ledPin, LOW);
              enviaPostLedStatus(ledState);
            }

            // Página HTML
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<style>html { font-family: Helvetica; text-align: center; }");
            client.println(".button { padding: 16px 40px; font-size: 30px; margin: 10px; cursor: pointer; }");
            client.println(".on { background-color: green; color: white; }");
            client.println(".off { background-color: gray; color: white; }</style></head>");

            client.println("<body><h1>Controle de LED ESP8266</h1>");
            client.println("<p>Estado do LED: " + ledState + "</p>");

            if (ledState == "off") {
              client.println("<p><a href=\"/led/on\"><button class=\"button on\">LIGAR</button></a></p>");
            } else {
              client.println("<p><a href=\"/led/off\"><button class=\"button off\">DESLIGAR</button></a></p>");
            }

            client.println("</body></html>");
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }

    header = "";
    client.stop();
    Serial.println("Cliente desconectado.\n");
  }
}
