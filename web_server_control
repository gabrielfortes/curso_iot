/*********
  Exemplo modificado para controlar apenas um LED com ESP8266
*********/

#include <ESP8266WiFi.h>

// Substitua com as credenciais da sua rede Wi-Fi
const char* ssid = "UEA_PROENSP";
const char* password = "proenspwifi";

// Cria o servidor na porta 80
WiFiServer server(80);

// Variável para armazenar o pedido HTTP
String header;

// Estado do LED
String ledState = "off";

// Define o pino do LED (GPIO5 é D1 no NodeMCU)
const int ledPin = 2;

// Variáveis de tempo para timeout da conexão
unsigned long currentTime = millis();
unsigned long previousTime = 0;
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  // Conecta ao Wi-Fi
  Serial.print("Conectando-se a ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado.");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("Novo cliente.");
    String currentLine = "";

    while (client.connected() && currentTime - previousTime <= timeoutTime) {
      currentTime = millis();

      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        header += c;

        if (c == '\n') {
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            if (header.indexOf("GET /led/on") >= 0) {
              Serial.println("LED ligado");
              ledState = "on";
              digitalWrite(ledPin, HIGH);
            } else if (header.indexOf("GET /led/off") >= 0) {
              Serial.println("LED desligado");
              ledState = "off";
              digitalWrite(ledPin, LOW);
            }

            // Página HTML
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<style>html { font-family: Helvetica; text-align: center; }");
            client.println(".button { padding: 16px 40px; font-size: 30px; margin: 10px; cursor: pointer; }");
            client.println(".on { background-color: green; color: white; }");
            client.println(".off { background-color: gray; color: white; }</style></head>");

            client.println("<body><h1>Controle de LED ESP8266</h1>");
            client.println("<p>Estado do LED: " + ledState + "</p>");

            if (ledState == "off") {
              client.println("<p><a href=\"/led/on\"><button class=\"button on\">LIGAR</button></a></p>");
            } else {
              client.println("<p><a href=\"/led/off\"><button class=\"button off\">DESLIGAR</button></a></p>");
            }

            client.println("</body></html>");
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }

    header = "";
    client.stop();
    Serial.println("Cliente desconectado.");
    Serial.println("");
  }
}
